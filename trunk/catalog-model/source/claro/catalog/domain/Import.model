root /packages:Claro/packages:Domain/packages

import Metaphor.PIM.Archetypes.CrmArchetype
import Metaphor.PIM.Domain.Attribute
import Metaphor.PIM.Domain.Class
import Metaphor.PIM.Domain.Enumeration
import Metaphor.PIM.Domain.Literal
import Metaphor.PIM.Domain.Operation
import Metaphor.PIM.Domain.Package
import Metaphor.PIM.Domain.Parameter

path primitive = /packages:Metaphor/packages:PIM/packages:Domain/types
path catalog = /packages:Claro/packages:Domain/packages:Catalog/types
path shop = /packages:Claro/packages:Domain/packages:Shop/types
path party = /packages:Claro/packages:Domain/packages:Party/types
path importing = /packages:Claro/packages:Domain/packages:Importing/types

Package {
    name = Importing
    types = {
        Class {
            name = ImportDefinition
            attributes = {
                Attribute {
                    name = name
                    type = primitive:String
                }
                @comment "Expression for import url"
                Attribute {
                    name = importUrl
                    type = primitive:String
                    lower = 0
                }
                @comment "Expression for import source name"
                Attribute {
                    name = importSourceName
                    type = primitive:String
                    lower = 0
                }
                @comment "Determines what property is used to match products"
                Attribute {
                    name = matchProperty
                    type = primitive:String
                    lower = 0
                }
                Attribute {
                    name = priority
                    type = primitive:Integer
                    lower = 0
                }
                @comment "Incremented in every import, can be used in expressions"
                Attribute {
                    name = sequenceNr
                    type = primitive:Integer
                    lower = 0
                }
                Attribute {
                    name = categories
                    type = importing:ImportCategory
                    lower = 0
                    upper = {}
                    isComposite = true
                    opposite = importing:ImportCategory/attributes:importDefinition
                }
                Attribute {
                    name = properties
                    type = importing:ImportProperty
                    lower = 0
                    upper = {}
                    isComposite = true
                    opposite = importing:ImportProperty/attributes:importDefinition
                }
                Attribute {
                    name = importSources
                    type = importing:ImportSource
                    lower = 0
                    upper = {}
                    isComposite = true
                    opposite = importing:ImportSource/attributes:importDefinition
                }
            }
        }
        Class {
            name = TabularImportDefinition
            superClass = importing:ImportDefinition
            attributes = {
                Attribute {
                    name = headerLine
                    type = primitive:Boolean
                }
                Attribute {
                    name = charset
                    type = primitive:String
                    lower = 0
                }
                
            }
        }
        Class {
            name = ImportCategory
            attributes = {
                Attribute {
                    name = importDefinition
                    type = importing:ImportDefinition
                    opposite = importing:ImportDefinition/attributes:categories
                }
                Attribute {
                    name = expression
                    type = primitive:String
                }
            }
        }
        Class {
            name = ImportProperty
            attributes = {
                Attribute {
                    name = importDefinition
                    type = importing:ImportDefinition
                    opposite = importing:ImportDefinition/attributes:properties
                }
                Attribute {
                    name = property
                    type = catalog:Property
                }
                Attribute {
                    name = expression
                    type = primitive:String
                }
            }
        }
        Class {
            name = ImportSource
            attributes = {
                Attribute {
                    name = importDefinition
                    type = importing:ImportDefinition
                    opposite = importing:ImportDefinition/attributes:importSources
                }
            }
        }
   }
}
 