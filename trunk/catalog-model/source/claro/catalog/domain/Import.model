root /packages:Claro/packages:Domain/packages

import Metaphor.PIM.Archetypes.CrmArchetype
import Metaphor.PIM.Domain.Attribute
import Metaphor.PIM.Domain.Class
import Metaphor.PIM.Domain.Enumeration
import Metaphor.PIM.Domain.Literal
import Metaphor.PIM.Domain.Operation
import Metaphor.PIM.Domain.Package
import Metaphor.PIM.Domain.Parameter

path primitive = /packages:Metaphor/packages:PIM/packages:Domain/types
path catalog = /packages:Claro/packages:Domain/packages:Catalog/types
path jobs = /packages:Claro/packages:Domain/packages:Jobs/types
path party = /packages:Claro/packages:Domain/packages:Party/types
path importing = /packages:Claro/packages:Domain/packages:Importing/types

Package {
    name = Importing
    types = {
        Class {
            name = ImportSource
            superClass = catalog:Source
            attributes = {
                Attribute {
                    name = name
                    type = primitive:String
                }
                @comment "Can contain a * wildcard to denote substition"
                Attribute {
                    name = importUrl
                    type = primitive:String
                    lower = 0
                }
                @comment "Expects a number in the wildcard that should denote a sequence. A missing sequence will be flagged. Works with non-file urls"
                Attribute {
                    name = sequentialUrl
                    type = primitive:Boolean
                }
                @comment "Urls are ordered lexicagraficcally. There should be a wildcard in importUrl. Only larger urls will be imported. Only works with file urls." 
                Attribute {
                    name = orderedUrl
                    type = primitive:Boolean
                }
                Attribute {
                    name = incremental
                    type = primitive:Boolean
                }
                Attribute {
                    name = lastImportedUrl
                    type = primitive:String
                    lower = 0
                }
                @comment "if false, use the first rules (when sorted by relative url) and ignore relative url"
                Attribute {
                    name = multiFileImport
                    type = primitive:Boolean
                    default = false
                }
                @comment "sorted by relative url"   
                Attribute {
                    name = rules
                    type = importing:ImportRules
                    lower = 0
                    upper = {}
                    isComposite = true
                    opposite = importing:ImportRules/attributes:importSource
                }
                Attribute {
                    name = job
                    type = jobs:Job
                    isComposite = true
                }
            }
        }
        Class {
            name = ImportRules
            attributes = {
                @comment "Url appended to importUrl. Useful for importing multi-file archives. When not set, importUrl is used."
                Attribute {
                    name = relativeUrl
                    type = primitive:String
                    lower = 0
                }
                Attribute {
                    name = fileFormat
                    type = importing:ImportFileFormat
                    lower = 0
                }
                Attribute {
                    name = tabularFileFormat
                    type = importing:TabularFileFormat
                    lower = 0
                    isComposite = true
                }
                Attribute {
                    name = xmlFileFormat
                    type = importing:XmlFileFormat
                    lower = 0
                    isComposite = true
                }
                Attribute {
                    name = languageExpression
                    type = primitive:String
                    lower = 0
                }
                Attribute {
                    name = defaultCurrency
                    type = primitive:String
                    lower = 0
                }
                Attribute {
                    name = importProducts
                    type = importing:ImportProducts
                    lower = 0
                    isComposite = true
                    opposite = importing:ImportProducts/attributes:rules
                }
                Attribute {
                    name = importSource
                    type = importing:ImportSource
                    opposite = importing:ImportSource/attributes:rules
                }
            }
        }
        Class {
            name = ImportProducts
            attributes = {
                @comment "Determines what property is used to match products"
                Attribute {
                    name = matchProperty
                    type = catalog:Property
                    lower = 0
                }
                Attribute {
                    name = outputChannelExpression
                    type = primitive:String
                }
                Attribute {
                    name = categories
                    type = importing:ImportCategory
                    lower = 0
                    upper = {}
                    isComposite = true
                    opposite = importing:ImportCategory/attributes:importProducts
                }
                Attribute {
                    name = properties
                    type = importing:ImportProperty
                    lower = 0
                    upper = {}
                    isComposite = true
                    opposite = importing:ImportProperty/attributes:importProducts
                }
                Attribute {
                    name = rules
                    type = importing:ImportRules
                    opposite = importing:ImportRules/attributes:importProducts
                }
            }
        }
        Class {
            name = ImportJobResult
            superClass = jobs:JobResult
            attributes = {
                Attribute {
                    name = importSource
                    type = importing:ImportSource
                }
                Attribute {
                    name = url
                    type = primitive:String
                }
            }
        }
        Class {
            name = ImportFileFormat
        }
        Class {
            name = TabularFileFormat
            superClass = importing:ImportFileFormat
            attributes = {
                Attribute {
                    name = headerLine
                    type = primitive:Boolean
                }
                Attribute {
                    name = charset
                    type = primitive:String
                    lower = 0
                }
                @comment "Defaults to ';\t"
                Attribute {
                    name = separatorChars
                    type = primitive:String
                    lower = 0
                }
            }
        }
        Class {
            name = XmlFileFormat
            superClass = importing:ImportFileFormat
        }
        Class {
            name = ImportCategory
            attributes = {
                Attribute {
                    name = importProducts
                    type = importing:ImportProducts
                    opposite = importing:ImportProducts/attributes:categories
                }
                Attribute {
                    name = categoryExpression
                    type = primitive:String
                }
            }
        }
        Class {
            name = ImportProperty
            attributes = {
                Attribute {
                    name = importProducts
                    type = importing:ImportProducts
                    opposite = importing:ImportProducts/attributes:properties
                }
                Attribute {
                    name = property
                    type = catalog:Property
                }
                Attribute {
                    name = valueExpression
                    type = primitive:String
                }
            }
        }
    }
}
 